// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenParserModelResumePersonalAttributes sovren parser model resume personal attributes
//
// swagger:model Sovren.Parser.Model.Resume.PersonalAttributes
type SovrenParserModelResumePersonalAttributes struct {

	// availability
	Availability string `json:"Availability,omitempty"`

	// birthplace
	Birthplace string `json:"Birthplace,omitempty"`

	// current location
	CurrentLocation string `json:"CurrentLocation,omitempty"`

	// current salary
	CurrentSalary *SovrenParserModelResumeSalary `json:"CurrentSalary,omitempty"`

	// date of birth
	DateOfBirth *SovrenParserModelSovrenDateWithParts `json:"DateOfBirth,omitempty"`

	// driving license
	DrivingLicense string `json:"DrivingLicense,omitempty"`

	// family composition
	FamilyComposition string `json:"FamilyComposition,omitempty"`

	// fathers name
	FathersName string `json:"FathersName,omitempty"`

	// gender
	Gender string `json:"Gender,omitempty"`

	// hukou area
	HukouArea string `json:"HukouArea,omitempty"`

	// hukou city
	HukouCity string `json:"HukouCity,omitempty"`

	// marital status
	MaritalStatus string `json:"MaritalStatus,omitempty"`

	// mother tongue
	MotherTongue string `json:"MotherTongue,omitempty"`

	// mothers maiden name
	MothersMaidenName string `json:"MothersMaidenName,omitempty"`

	// national identities
	NationalIdentities []*SovrenParserModelResumeNationalIdentity `json:"NationalIdentities"`

	// nationality
	Nationality string `json:"Nationality,omitempty"`

	// passport number
	PassportNumber string `json:"PassportNumber,omitempty"`

	// preferred location
	PreferredLocation string `json:"PreferredLocation,omitempty"`

	// required salary
	RequiredSalary *SovrenParserModelResumeSalary `json:"RequiredSalary,omitempty"`

	// visa status
	VisaStatus string `json:"VisaStatus,omitempty"`

	// willing to relocate
	WillingToRelocate string `json:"WillingToRelocate,omitempty"`
}

// Validate validates this sovren parser model resume personal attributes
func (m *SovrenParserModelResumePersonalAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentSalary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNationalIdentities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredSalary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) validateCurrentSalary(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentSalary) { // not required
		return nil
	}

	if m.CurrentSalary != nil {
		if err := m.CurrentSalary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentSalary")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) validateDateOfBirth(formats strfmt.Registry) error {
	if swag.IsZero(m.DateOfBirth) { // not required
		return nil
	}

	if m.DateOfBirth != nil {
		if err := m.DateOfBirth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DateOfBirth")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) validateNationalIdentities(formats strfmt.Registry) error {
	if swag.IsZero(m.NationalIdentities) { // not required
		return nil
	}

	for i := 0; i < len(m.NationalIdentities); i++ {
		if swag.IsZero(m.NationalIdentities[i]) { // not required
			continue
		}

		if m.NationalIdentities[i] != nil {
			if err := m.NationalIdentities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NationalIdentities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) validateRequiredSalary(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredSalary) { // not required
		return nil
	}

	if m.RequiredSalary != nil {
		if err := m.RequiredSalary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RequiredSalary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren parser model resume personal attributes based on the context it is used
func (m *SovrenParserModelResumePersonalAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentSalary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDateOfBirth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNationalIdentities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredSalary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) contextValidateCurrentSalary(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentSalary != nil {
		if err := m.CurrentSalary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentSalary")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) contextValidateDateOfBirth(ctx context.Context, formats strfmt.Registry) error {

	if m.DateOfBirth != nil {
		if err := m.DateOfBirth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DateOfBirth")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) contextValidateNationalIdentities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NationalIdentities); i++ {

		if m.NationalIdentities[i] != nil {
			if err := m.NationalIdentities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NationalIdentities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumePersonalAttributes) contextValidateRequiredSalary(ctx context.Context, formats strfmt.Registry) error {

	if m.RequiredSalary != nil {
		if err := m.RequiredSalary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RequiredSalary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenParserModelResumePersonalAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenParserModelResumePersonalAttributes) UnmarshalBinary(b []byte) error {
	var res SovrenParserModelResumePersonalAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
