// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SovrenLocationCriteria sovren location criteria
//
// swagger:model Sovren.LocationCriteria
type SovrenLocationCriteria struct {

	// distance
	Distance float64 `json:"Distance,omitempty"`

	// distance unit
	// Enum: [Miles Kilometers]
	DistanceUnit string `json:"DistanceUnit,omitempty"`

	// geocode provider
	// Enum: [None Google Bing]
	GeocodeProvider string `json:"GeocodeProvider,omitempty"`

	// geocode provider key
	GeocodeProviderKey string `json:"GeocodeProviderKey,omitempty"`

	// locations
	Locations []*SovrenLocation `json:"Locations"`
}

// Validate validates this sovren location criteria
func (m *SovrenLocationCriteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDistanceUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeocodeProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sovrenLocationCriteriaTypeDistanceUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Miles","Kilometers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sovrenLocationCriteriaTypeDistanceUnitPropEnum = append(sovrenLocationCriteriaTypeDistanceUnitPropEnum, v)
	}
}

const (

	// SovrenLocationCriteriaDistanceUnitMiles captures enum value "Miles"
	SovrenLocationCriteriaDistanceUnitMiles string = "Miles"

	// SovrenLocationCriteriaDistanceUnitKilometers captures enum value "Kilometers"
	SovrenLocationCriteriaDistanceUnitKilometers string = "Kilometers"
)

// prop value enum
func (m *SovrenLocationCriteria) validateDistanceUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sovrenLocationCriteriaTypeDistanceUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SovrenLocationCriteria) validateDistanceUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.DistanceUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateDistanceUnitEnum("DistanceUnit", "body", m.DistanceUnit); err != nil {
		return err
	}

	return nil
}

var sovrenLocationCriteriaTypeGeocodeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Google","Bing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sovrenLocationCriteriaTypeGeocodeProviderPropEnum = append(sovrenLocationCriteriaTypeGeocodeProviderPropEnum, v)
	}
}

const (

	// SovrenLocationCriteriaGeocodeProviderNone captures enum value "None"
	SovrenLocationCriteriaGeocodeProviderNone string = "None"

	// SovrenLocationCriteriaGeocodeProviderGoogle captures enum value "Google"
	SovrenLocationCriteriaGeocodeProviderGoogle string = "Google"

	// SovrenLocationCriteriaGeocodeProviderBing captures enum value "Bing"
	SovrenLocationCriteriaGeocodeProviderBing string = "Bing"
)

// prop value enum
func (m *SovrenLocationCriteria) validateGeocodeProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sovrenLocationCriteriaTypeGeocodeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SovrenLocationCriteria) validateGeocodeProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.GeocodeProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateGeocodeProviderEnum("GeocodeProvider", "body", m.GeocodeProvider); err != nil {
		return err
	}

	return nil
}

func (m *SovrenLocationCriteria) validateLocations(formats strfmt.Registry) error {
	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	for i := 0; i < len(m.Locations); i++ {
		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {
			if err := m.Locations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sovren location criteria based on the context it is used
func (m *SovrenLocationCriteria) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenLocationCriteria) contextValidateLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Locations); i++ {

		if m.Locations[i] != nil {
			if err := m.Locations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenLocationCriteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenLocationCriteria) UnmarshalBinary(b []byte) error {
	var res SovrenLocationCriteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
