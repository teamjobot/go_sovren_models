// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenSaasServicesRestDomainV10ParseJobOrderRequest sovren saas services rest domain v10 parse job order request
//
// swagger:model Sovren.Saas.Services.Rest.Domain.V10ParseJobOrderRequest
type SovrenSaasServicesRestDomainV10ParseJobOrderRequest struct {

	// configuration
	Configuration *SovrenSaasDomainParseJobOrderConfiguration `json:"Configuration,omitempty"`

	// document as base64 string
	DocumentAsBase64String string `json:"DocumentAsBase64String,omitempty"`

	// document last modified
	DocumentLastModified string `json:"DocumentLastModified,omitempty"`

	// geocode options
	GeocodeOptions *SovrenGeoCodeOptions `json:"GeocodeOptions,omitempty"`

	// indexing options
	IndexingOptions *SovrenSaasDomainV10IndexingOptions `json:"IndexingOptions,omitempty"`

	// normalizer data
	NormalizerData string `json:"NormalizerData,omitempty"`

	// output Html
	OutputHTML bool `json:"OutputHtml,omitempty"`

	// output pdf
	OutputPdf bool `json:"OutputPdf,omitempty"`

	// output rtf
	OutputRtf bool `json:"OutputRtf,omitempty"`

	// skills data
	SkillsData []string `json:"SkillsData"`
}

// Validate validates this sovren saas services rest domain v10 parse job order request
func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeocodeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) validateConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Configuration")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) validateGeocodeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.GeocodeOptions) { // not required
		return nil
	}

	if m.GeocodeOptions != nil {
		if err := m.GeocodeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeocodeOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) validateIndexingOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingOptions) { // not required
		return nil
	}

	if m.IndexingOptions != nil {
		if err := m.IndexingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IndexingOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren saas services rest domain v10 parse job order request based on the context it is used
func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeocodeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexingOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {
		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Configuration")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) contextValidateGeocodeOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.GeocodeOptions != nil {
		if err := m.GeocodeOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeocodeOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) contextValidateIndexingOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingOptions != nil {
		if err := m.IndexingOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IndexingOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenSaasServicesRestDomainV10ParseJobOrderRequest) UnmarshalBinary(b []byte) error {
	var res SovrenSaasServicesRestDomainV10ParseJobOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
