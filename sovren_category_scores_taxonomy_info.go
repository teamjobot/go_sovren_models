// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenCategoryScoresTaxonomyInfo sovren category scores taxonomy info
//
// swagger:model Sovren.CategoryScores.TaxonomyInfo
type SovrenCategoryScoresTaxonomyInfo struct {

	// subtaxonomy
	Subtaxonomy *SovrenCategoryScoresTaxonomyMatchInfo `json:"Subtaxonomy,omitempty"`

	// taxonomy
	Taxonomy *SovrenCategoryScoresTaxonomyMatchInfo `json:"Taxonomy,omitempty"`
}

// Validate validates this sovren category scores taxonomy info
func (m *SovrenCategoryScoresTaxonomyInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubtaxonomy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxonomy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenCategoryScoresTaxonomyInfo) validateSubtaxonomy(formats strfmt.Registry) error {
	if swag.IsZero(m.Subtaxonomy) { // not required
		return nil
	}

	if m.Subtaxonomy != nil {
		if err := m.Subtaxonomy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Subtaxonomy")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresTaxonomyInfo) validateTaxonomy(formats strfmt.Registry) error {
	if swag.IsZero(m.Taxonomy) { // not required
		return nil
	}

	if m.Taxonomy != nil {
		if err := m.Taxonomy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Taxonomy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren category scores taxonomy info based on the context it is used
func (m *SovrenCategoryScoresTaxonomyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubtaxonomy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxonomy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenCategoryScoresTaxonomyInfo) contextValidateSubtaxonomy(ctx context.Context, formats strfmt.Registry) error {

	if m.Subtaxonomy != nil {
		if err := m.Subtaxonomy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Subtaxonomy")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresTaxonomyInfo) contextValidateTaxonomy(ctx context.Context, formats strfmt.Registry) error {

	if m.Taxonomy != nil {
		if err := m.Taxonomy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Taxonomy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenCategoryScoresTaxonomyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenCategoryScoresTaxonomyInfo) UnmarshalBinary(b []byte) error {
	var res SovrenCategoryScoresTaxonomyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
