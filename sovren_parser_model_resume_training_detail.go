// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenParserModelResumeTrainingDetail sovren parser model resume training detail
//
// swagger:model Sovren.Parser.Model.Resume.TrainingDetail
type SovrenParserModelResumeTrainingDetail struct {

	// end date
	EndDate *SovrenParserModelSovrenDateWithParts `json:"EndDate,omitempty"`

	// entity
	Entity string `json:"Entity,omitempty"`

	// qualifications
	Qualifications []string `json:"Qualifications"`

	// start date
	StartDate *SovrenParserModelSovrenDateWithParts `json:"StartDate,omitempty"`

	// text
	Text string `json:"Text,omitempty"`
}

// Validate validates this sovren parser model resume training detail
func (m *SovrenParserModelResumeTrainingDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumeTrainingDetail) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if m.EndDate != nil {
		if err := m.EndDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndDate")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeTrainingDetail) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if m.StartDate != nil {
		if err := m.StartDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren parser model resume training detail based on the context it is used
func (m *SovrenParserModelResumeTrainingDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumeTrainingDetail) contextValidateEndDate(ctx context.Context, formats strfmt.Registry) error {

	if m.EndDate != nil {
		if err := m.EndDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndDate")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeTrainingDetail) contextValidateStartDate(ctx context.Context, formats strfmt.Registry) error {

	if m.StartDate != nil {
		if err := m.StartDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenParserModelResumeTrainingDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenParserModelResumeTrainingDetail) UnmarshalBinary(b []byte) error {
	var res SovrenParserModelResumeTrainingDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
