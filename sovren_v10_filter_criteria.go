// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenV10FilterCriteria sovren v10 filter criteria
//
// swagger:model Sovren.V10FilterCriteria
type SovrenV10FilterCriteria struct {

	// average months per employer
	AverageMonthsPerEmployer *SovrenIntegerRange `json:"AverageMonthsPerEmployer,omitempty"`

	// certifications
	Certifications []string `json:"Certifications"`

	// current management level
	CurrentManagementLevel string `json:"CurrentManagementLevel,omitempty"`

	// degree names
	DegreeNames []string `json:"DegreeNames"`

	// degree types
	DegreeTypes []string `json:"DegreeTypes"`

	// document ids
	DocumentIds []string `json:"DocumentIds"`

	// document languages
	DocumentLanguages []string `json:"DocumentLanguages"`

	// educations
	Educations []*SovrenEducation `json:"Educations"`

	// employers
	Employers []string `json:"Employers"`

	// employers must all be current employer
	EmployersMustAllBeCurrentEmployer bool `json:"EmployersMustAllBeCurrentEmployer,omitempty"`

	// executive type
	ExecutiveType []string `json:"ExecutiveType"`

	// has patents
	HasPatents bool `json:"HasPatents,omitempty"`

	// has security credentials
	HasSecurityCredentials bool `json:"HasSecurityCredentials,omitempty"`

	// is author
	IsAuthor bool `json:"IsAuthor,omitempty"`

	// is current student
	IsCurrentStudent bool `json:"IsCurrentStudent,omitempty"`

	// is military
	IsMilitary bool `json:"IsMilitary,omitempty"`

	// is public speaker
	IsPublicSpeaker bool `json:"IsPublicSpeaker,omitempty"`

	// is recent graduate
	IsRecentGraduate bool `json:"IsRecentGraduate,omitempty"`

	// is top student
	IsTopStudent bool `json:"IsTopStudent,omitempty"`

	// job predictive index
	JobPredictiveIndex *SovrenIntegerRange `json:"JobPredictiveIndex,omitempty"`

	// job titles
	JobTitles []*SovrenJobTitleSlim `json:"JobTitles"`

	// languages known
	LanguagesKnown []string `json:"LanguagesKnown"`

	// languages known must all exist
	LanguagesKnownMustAllExist bool `json:"LanguagesKnownMustAllExist,omitempty"`

	// location criteria
	LocationCriteria *SovrenLocationCriteria `json:"LocationCriteria,omitempty"`

	// months experience
	MonthsExperience *SovrenIntegerRange `json:"MonthsExperience,omitempty"`

	// months management experience
	MonthsManagementExperience *SovrenIntegerRange `json:"MonthsManagementExperience,omitempty"`

	// revision date range
	RevisionDateRange *SovrenRange1SystemStringMscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"RevisionDateRange,omitempty"`

	// school names
	SchoolNames []string `json:"SchoolNames"`

	// search expression
	SearchExpression string `json:"SearchExpression,omitempty"`

	// security credentials
	SecurityCredentials []string `json:"SecurityCredentials"`

	// skills
	Skills []*SovrenSkill `json:"Skills"`

	// skills must all exist
	SkillsMustAllExist bool `json:"SkillsMustAllExist,omitempty"`

	// taxonomies
	Taxonomies []string `json:"Taxonomies"`

	// user defined tags
	UserDefinedTags []string `json:"UserDefinedTags"`

	// user defined tags must all exist
	UserDefinedTagsMustAllExist bool `json:"UserDefinedTagsMustAllExist,omitempty"`
}

// Validate validates this sovren v10 filter criteria
func (m *SovrenV10FilterCriteria) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageMonthsPerEmployer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEducations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobPredictiveIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthsExperience(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthsManagementExperience(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisionDateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkills(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenV10FilterCriteria) validateAverageMonthsPerEmployer(formats strfmt.Registry) error {
	if swag.IsZero(m.AverageMonthsPerEmployer) { // not required
		return nil
	}

	if m.AverageMonthsPerEmployer != nil {
		if err := m.AverageMonthsPerEmployer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AverageMonthsPerEmployer")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateEducations(formats strfmt.Registry) error {
	if swag.IsZero(m.Educations) { // not required
		return nil
	}

	for i := 0; i < len(m.Educations); i++ {
		if swag.IsZero(m.Educations[i]) { // not required
			continue
		}

		if m.Educations[i] != nil {
			if err := m.Educations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Educations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateJobPredictiveIndex(formats strfmt.Registry) error {
	if swag.IsZero(m.JobPredictiveIndex) { // not required
		return nil
	}

	if m.JobPredictiveIndex != nil {
		if err := m.JobPredictiveIndex.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobPredictiveIndex")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateJobTitles(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTitles) { // not required
		return nil
	}

	for i := 0; i < len(m.JobTitles); i++ {
		if swag.IsZero(m.JobTitles[i]) { // not required
			continue
		}

		if m.JobTitles[i] != nil {
			if err := m.JobTitles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("JobTitles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateLocationCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationCriteria) { // not required
		return nil
	}

	if m.LocationCriteria != nil {
		if err := m.LocationCriteria.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LocationCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateMonthsExperience(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthsExperience) { // not required
		return nil
	}

	if m.MonthsExperience != nil {
		if err := m.MonthsExperience.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MonthsExperience")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateMonthsManagementExperience(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthsManagementExperience) { // not required
		return nil
	}

	if m.MonthsManagementExperience != nil {
		if err := m.MonthsManagementExperience.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MonthsManagementExperience")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateRevisionDateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.RevisionDateRange) { // not required
		return nil
	}

	if m.RevisionDateRange != nil {
		if err := m.RevisionDateRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RevisionDateRange")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) validateSkills(formats strfmt.Registry) error {
	if swag.IsZero(m.Skills) { // not required
		return nil
	}

	for i := 0; i < len(m.Skills); i++ {
		if swag.IsZero(m.Skills[i]) { // not required
			continue
		}

		if m.Skills[i] != nil {
			if err := m.Skills[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sovren v10 filter criteria based on the context it is used
func (m *SovrenV10FilterCriteria) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAverageMonthsPerEmployer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEducations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobPredictiveIndex(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobTitles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocationCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthsExperience(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthsManagementExperience(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevisionDateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateAverageMonthsPerEmployer(ctx context.Context, formats strfmt.Registry) error {

	if m.AverageMonthsPerEmployer != nil {
		if err := m.AverageMonthsPerEmployer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AverageMonthsPerEmployer")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateEducations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Educations); i++ {

		if m.Educations[i] != nil {
			if err := m.Educations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Educations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateJobPredictiveIndex(ctx context.Context, formats strfmt.Registry) error {

	if m.JobPredictiveIndex != nil {
		if err := m.JobPredictiveIndex.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobPredictiveIndex")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateJobTitles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobTitles); i++ {

		if m.JobTitles[i] != nil {
			if err := m.JobTitles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("JobTitles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateLocationCriteria(ctx context.Context, formats strfmt.Registry) error {

	if m.LocationCriteria != nil {
		if err := m.LocationCriteria.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LocationCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateMonthsExperience(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthsExperience != nil {
		if err := m.MonthsExperience.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MonthsExperience")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateMonthsManagementExperience(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthsManagementExperience != nil {
		if err := m.MonthsManagementExperience.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MonthsManagementExperience")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateRevisionDateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.RevisionDateRange != nil {
		if err := m.RevisionDateRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RevisionDateRange")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenV10FilterCriteria) contextValidateSkills(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Skills); i++ {

		if m.Skills[i] != nil {
			if err := m.Skills[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenV10FilterCriteria) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenV10FilterCriteria) UnmarshalBinary(b []byte) error {
	var res SovrenV10FilterCriteria
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
