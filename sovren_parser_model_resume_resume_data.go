// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenParserModelResumeResumeData sovren parser model resume resume data
//
// swagger:model Sovren.Parser.Model.Resume.ResumeData
type SovrenParserModelResumeResumeData struct {

	// achievements
	Achievements []string `json:"Achievements"`

	// associations
	Associations []*SovrenParserModelResumeAssociation `json:"Associations"`

	// certifications
	Certifications []*SovrenParserModelResumeCertification `json:"Certifications"`

	// contact information
	ContactInformation *SovrenParserModelResumeContactInformation `json:"ContactInformation,omitempty"`

	// cover letter
	CoverLetter string `json:"CoverLetter,omitempty"`

	// education
	Education *SovrenParserModelResumeEducationHistory `json:"Education,omitempty"`

	// employment history
	EmploymentHistory *SovrenParserModelResumeEmploymentHistory `json:"EmploymentHistory,omitempty"`

	// hobbies
	Hobbies string `json:"Hobbies,omitempty"`

	// language competencies
	LanguageCompetencies []*SovrenParserModelResumeLanguageCompetency `json:"LanguageCompetencies"`

	// licenses
	Licenses []*SovrenParserModelResumeLicenseDetail `json:"Licenses"`

	// military experience
	MilitaryExperience []*SovrenParserModelResumeMilitaryDetails `json:"MilitaryExperience"`

	// objective
	Objective string `json:"Objective,omitempty"`

	// patents
	Patents string `json:"Patents,omitempty"`

	// personal attributes
	PersonalAttributes *SovrenParserModelResumePersonalAttributes `json:"PersonalAttributes,omitempty"`

	// professional summary
	ProfessionalSummary string `json:"ProfessionalSummary,omitempty"`

	// publications
	Publications string `json:"Publications,omitempty"`

	// qualifications summary
	QualificationsSummary string `json:"QualificationsSummary,omitempty"`

	// references
	References []*SovrenParserModelResumeCandidateReference `json:"References"`

	// resume metadata
	ResumeMetadata *SovrenParserModelResumeResumeMetadata `json:"ResumeMetadata,omitempty"`

	// security credentials
	SecurityCredentials []*SovrenParserModelResumeSecurityCredential `json:"SecurityCredentials"`

	// skills data
	SkillsData []*SovrenParserModelResumeResumeTaxonomyRoot `json:"SkillsData"`

	// speaking engagements
	SpeakingEngagements string `json:"SpeakingEngagements,omitempty"`

	// training
	Training *SovrenParserModelResumeTrainingHistory `json:"Training,omitempty"`

	// user defined tags
	UserDefinedTags []string `json:"UserDefinedTags"`
}

// Validate validates this sovren parser model resume resume data
func (m *SovrenParserModelResumeResumeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEducation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmploymentHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguageCompetencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilitaryExperience(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResumeMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillsData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraining(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumeResumeData) validateAssociations(formats strfmt.Registry) error {
	if swag.IsZero(m.Associations) { // not required
		return nil
	}

	for i := 0; i < len(m.Associations); i++ {
		if swag.IsZero(m.Associations[i]) { // not required
			continue
		}

		if m.Associations[i] != nil {
			if err := m.Associations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Associations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateCertifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Certifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Certifications); i++ {
		if swag.IsZero(m.Certifications[i]) { // not required
			continue
		}

		if m.Certifications[i] != nil {
			if err := m.Certifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Certifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateContactInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactInformation) { // not required
		return nil
	}

	if m.ContactInformation != nil {
		if err := m.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateEducation(formats strfmt.Registry) error {
	if swag.IsZero(m.Education) { // not required
		return nil
	}

	if m.Education != nil {
		if err := m.Education.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Education")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateEmploymentHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.EmploymentHistory) { // not required
		return nil
	}

	if m.EmploymentHistory != nil {
		if err := m.EmploymentHistory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EmploymentHistory")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateLanguageCompetencies(formats strfmt.Registry) error {
	if swag.IsZero(m.LanguageCompetencies) { // not required
		return nil
	}

	for i := 0; i < len(m.LanguageCompetencies); i++ {
		if swag.IsZero(m.LanguageCompetencies[i]) { // not required
			continue
		}

		if m.LanguageCompetencies[i] != nil {
			if err := m.LanguageCompetencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LanguageCompetencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateLicenses(formats strfmt.Registry) error {
	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {
		if swag.IsZero(m.Licenses[i]) { // not required
			continue
		}

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateMilitaryExperience(formats strfmt.Registry) error {
	if swag.IsZero(m.MilitaryExperience) { // not required
		return nil
	}

	for i := 0; i < len(m.MilitaryExperience); i++ {
		if swag.IsZero(m.MilitaryExperience[i]) { // not required
			continue
		}

		if m.MilitaryExperience[i] != nil {
			if err := m.MilitaryExperience[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MilitaryExperience" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validatePersonalAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.PersonalAttributes) { // not required
		return nil
	}

	if m.PersonalAttributes != nil {
		if err := m.PersonalAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PersonalAttributes")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("References" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateResumeMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ResumeMetadata) { // not required
		return nil
	}

	if m.ResumeMetadata != nil {
		if err := m.ResumeMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResumeMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateSecurityCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityCredentials); i++ {
		if swag.IsZero(m.SecurityCredentials[i]) { // not required
			continue
		}

		if m.SecurityCredentials[i] != nil {
			if err := m.SecurityCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SecurityCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateSkillsData(formats strfmt.Registry) error {
	if swag.IsZero(m.SkillsData) { // not required
		return nil
	}

	for i := 0; i < len(m.SkillsData); i++ {
		if swag.IsZero(m.SkillsData[i]) { // not required
			continue
		}

		if m.SkillsData[i] != nil {
			if err := m.SkillsData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SkillsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) validateTraining(formats strfmt.Registry) error {
	if swag.IsZero(m.Training) { // not required
		return nil
	}

	if m.Training != nil {
		if err := m.Training.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Training")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren parser model resume resume data based on the context it is used
func (m *SovrenParserModelResumeResumeData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssociations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEducation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmploymentHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguageCompetencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMilitaryExperience(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePersonalAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResumeMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkillsData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraining(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateAssociations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Associations); i++ {

		if m.Associations[i] != nil {
			if err := m.Associations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Associations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateCertifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certifications); i++ {

		if m.Certifications[i] != nil {
			if err := m.Certifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Certifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInformation != nil {
		if err := m.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateEducation(ctx context.Context, formats strfmt.Registry) error {

	if m.Education != nil {
		if err := m.Education.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Education")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateEmploymentHistory(ctx context.Context, formats strfmt.Registry) error {

	if m.EmploymentHistory != nil {
		if err := m.EmploymentHistory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EmploymentHistory")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateLanguageCompetencies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LanguageCompetencies); i++ {

		if m.LanguageCompetencies[i] != nil {
			if err := m.LanguageCompetencies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LanguageCompetencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateLicenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Licenses); i++ {

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateMilitaryExperience(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MilitaryExperience); i++ {

		if m.MilitaryExperience[i] != nil {
			if err := m.MilitaryExperience[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MilitaryExperience" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidatePersonalAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.PersonalAttributes != nil {
		if err := m.PersonalAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PersonalAttributes")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.References); i++ {

		if m.References[i] != nil {
			if err := m.References[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("References" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateResumeMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ResumeMetadata != nil {
		if err := m.ResumeMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResumeMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateSecurityCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SecurityCredentials); i++ {

		if m.SecurityCredentials[i] != nil {
			if err := m.SecurityCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SecurityCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateSkillsData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SkillsData); i++ {

		if m.SkillsData[i] != nil {
			if err := m.SkillsData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SkillsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeResumeData) contextValidateTraining(ctx context.Context, formats strfmt.Registry) error {

	if m.Training != nil {
		if err := m.Training.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Training")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenParserModelResumeResumeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenParserModelResumeResumeData) UnmarshalBinary(b []byte) error {
	var res SovrenParserModelResumeResumeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
