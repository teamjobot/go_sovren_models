// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenParserModelResumePosition sovren parser model resume position
//
// swagger:model Sovren.Parser.Model.Resume.Position
type SovrenParserModelResumePosition struct {

	// bullets
	Bullets []*SovrenParserModelResumeBullet `json:"Bullets"`

	// description
	Description string `json:"Description,omitempty"`

	// employer
	Employer *SovrenParserModelResumeEmployer `json:"Employer,omitempty"`

	// end date
	EndDate *SovrenParserModelSovrenDateWithParts `json:"EndDate,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// is current
	IsCurrent bool `json:"IsCurrent,omitempty"`

	// is self employed
	IsSelfEmployed bool `json:"IsSelfEmployed,omitempty"`

	// job level
	JobLevel string `json:"JobLevel,omitempty"`

	// job title
	JobTitle *SovrenParserModelResumeJobTitle `json:"JobTitle,omitempty"`

	// job type
	JobType string `json:"JobType,omitempty"`

	// number employees supervised
	NumberEmployeesSupervised *SovrenCommonV10ParserModelsSovrenPrimitive1SystemInt32MscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"NumberEmployeesSupervised,omitempty"`

	// related to by company name
	RelatedToByCompanyName []string `json:"RelatedToByCompanyName"`

	// related to by dates
	RelatedToByDates []string `json:"RelatedToByDates"`

	// start date
	StartDate *SovrenParserModelSovrenDateWithParts `json:"StartDate,omitempty"`

	// sub taxonomy name
	SubTaxonomyName string `json:"SubTaxonomyName,omitempty"`

	// taxonomy name
	TaxonomyName string `json:"TaxonomyName,omitempty"`

	// taxonomy percentage
	TaxonomyPercentage int32 `json:"TaxonomyPercentage,omitempty"`
}

// Validate validates this sovren parser model resume position
func (m *SovrenParserModelResumePosition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBullets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberEmployeesSupervised(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumePosition) validateBullets(formats strfmt.Registry) error {
	if swag.IsZero(m.Bullets) { // not required
		return nil
	}

	for i := 0; i < len(m.Bullets); i++ {
		if swag.IsZero(m.Bullets[i]) { // not required
			continue
		}

		if m.Bullets[i] != nil {
			if err := m.Bullets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Bullets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumePosition) validateEmployer(formats strfmt.Registry) error {
	if swag.IsZero(m.Employer) { // not required
		return nil
	}

	if m.Employer != nil {
		if err := m.Employer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Employer")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if m.EndDate != nil {
		if err := m.EndDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndDate")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) validateJobTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTitle) { // not required
		return nil
	}

	if m.JobTitle != nil {
		if err := m.JobTitle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobTitle")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) validateNumberEmployeesSupervised(formats strfmt.Registry) error {
	if swag.IsZero(m.NumberEmployeesSupervised) { // not required
		return nil
	}

	if m.NumberEmployeesSupervised != nil {
		if err := m.NumberEmployeesSupervised.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NumberEmployeesSupervised")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if m.StartDate != nil {
		if err := m.StartDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren parser model resume position based on the context it is used
func (m *SovrenParserModelResumePosition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBullets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmployer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumberEmployeesSupervised(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumePosition) contextValidateBullets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bullets); i++ {

		if m.Bullets[i] != nil {
			if err := m.Bullets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Bullets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumePosition) contextValidateEmployer(ctx context.Context, formats strfmt.Registry) error {

	if m.Employer != nil {
		if err := m.Employer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Employer")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) contextValidateEndDate(ctx context.Context, formats strfmt.Registry) error {

	if m.EndDate != nil {
		if err := m.EndDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndDate")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) contextValidateJobTitle(ctx context.Context, formats strfmt.Registry) error {

	if m.JobTitle != nil {
		if err := m.JobTitle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobTitle")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) contextValidateNumberEmployeesSupervised(ctx context.Context, formats strfmt.Registry) error {

	if m.NumberEmployeesSupervised != nil {
		if err := m.NumberEmployeesSupervised.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NumberEmployeesSupervised")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelResumePosition) contextValidateStartDate(ctx context.Context, formats strfmt.Registry) error {

	if m.StartDate != nil {
		if err := m.StartDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenParserModelResumePosition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenParserModelResumePosition) UnmarshalBinary(b []byte) error {
	var res SovrenParserModelResumePosition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
