// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SovrenCategoryScoresEducationCategoryScore sovren category scores education category score
//
// swagger:model Sovren.CategoryScores.EducationCategoryScore
type SovrenCategoryScoresEducationCategoryScore struct {

	// actual education
	ActualEducation string `json:"ActualEducation,omitempty"`

	// comparison
	// Enum: [DoesNotMeetExpected MeetsExpected ExceedsExpected]
	Comparison string `json:"Comparison,omitempty"`

	// evidence
	Evidence []*SovrenCategoryScoresEvidence `json:"Evidence"`

	// expected education
	ExpectedEducation string `json:"ExpectedEducation,omitempty"`

	// unweighted score
	UnweightedScore float64 `json:"UnweightedScore,omitempty"`
}

// Validate validates this sovren category scores education category score
func (m *SovrenCategoryScoresEducationCategoryScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparison(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sovrenCategoryScoresEducationCategoryScoreTypeComparisonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DoesNotMeetExpected","MeetsExpected","ExceedsExpected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sovrenCategoryScoresEducationCategoryScoreTypeComparisonPropEnum = append(sovrenCategoryScoresEducationCategoryScoreTypeComparisonPropEnum, v)
	}
}

const (

	// SovrenCategoryScoresEducationCategoryScoreComparisonDoesNotMeetExpected captures enum value "DoesNotMeetExpected"
	SovrenCategoryScoresEducationCategoryScoreComparisonDoesNotMeetExpected string = "DoesNotMeetExpected"

	// SovrenCategoryScoresEducationCategoryScoreComparisonMeetsExpected captures enum value "MeetsExpected"
	SovrenCategoryScoresEducationCategoryScoreComparisonMeetsExpected string = "MeetsExpected"

	// SovrenCategoryScoresEducationCategoryScoreComparisonExceedsExpected captures enum value "ExceedsExpected"
	SovrenCategoryScoresEducationCategoryScoreComparisonExceedsExpected string = "ExceedsExpected"
)

// prop value enum
func (m *SovrenCategoryScoresEducationCategoryScore) validateComparisonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sovrenCategoryScoresEducationCategoryScoreTypeComparisonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SovrenCategoryScoresEducationCategoryScore) validateComparison(formats strfmt.Registry) error {
	if swag.IsZero(m.Comparison) { // not required
		return nil
	}

	// value enum
	if err := m.validateComparisonEnum("Comparison", "body", m.Comparison); err != nil {
		return err
	}

	return nil
}

func (m *SovrenCategoryScoresEducationCategoryScore) validateEvidence(formats strfmt.Registry) error {
	if swag.IsZero(m.Evidence) { // not required
		return nil
	}

	for i := 0; i < len(m.Evidence); i++ {
		if swag.IsZero(m.Evidence[i]) { // not required
			continue
		}

		if m.Evidence[i] != nil {
			if err := m.Evidence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evidence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sovren category scores education category score based on the context it is used
func (m *SovrenCategoryScoresEducationCategoryScore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvidence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenCategoryScoresEducationCategoryScore) contextValidateEvidence(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Evidence); i++ {

		if m.Evidence[i] != nil {
			if err := m.Evidence[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evidence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenCategoryScoresEducationCategoryScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenCategoryScoresEducationCategoryScore) UnmarshalBinary(b []byte) error {
	var res SovrenCategoryScoresEducationCategoryScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
