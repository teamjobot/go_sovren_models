// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenParserModelResumeEducationHistory sovren parser model resume education history
//
// swagger:model Sovren.Parser.Model.Resume.EducationHistory
type SovrenParserModelResumeEducationHistory struct {

	// education details
	EducationDetails []*SovrenParserModelResumeEducationDetails `json:"EducationDetails"`

	// highest degree
	HighestDegree *SovrenParserModelResumeDegree `json:"HighestDegree,omitempty"`
}

// Validate validates this sovren parser model resume education history
func (m *SovrenParserModelResumeEducationHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEducationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestDegree(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumeEducationHistory) validateEducationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.EducationDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.EducationDetails); i++ {
		if swag.IsZero(m.EducationDetails[i]) { // not required
			continue
		}

		if m.EducationDetails[i] != nil {
			if err := m.EducationDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EducationDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeEducationHistory) validateHighestDegree(formats strfmt.Registry) error {
	if swag.IsZero(m.HighestDegree) { // not required
		return nil
	}

	if m.HighestDegree != nil {
		if err := m.HighestDegree.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HighestDegree")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren parser model resume education history based on the context it is used
func (m *SovrenParserModelResumeEducationHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEducationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHighestDegree(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelResumeEducationHistory) contextValidateEducationDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EducationDetails); i++ {

		if m.EducationDetails[i] != nil {
			if err := m.EducationDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("EducationDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelResumeEducationHistory) contextValidateHighestDegree(ctx context.Context, formats strfmt.Registry) error {

	if m.HighestDegree != nil {
		if err := m.HighestDegree.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HighestDegree")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenParserModelResumeEducationHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenParserModelResumeEducationHistory) UnmarshalBinary(b []byte) error {
	var res SovrenParserModelResumeEducationHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
