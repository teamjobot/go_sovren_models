// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenSaasDomainV10JobParsingTransaction sovren saas domain v10 job parsing transaction
//
// swagger:model Sovren.Saas.Domain.V10.JobParsingTransaction
type SovrenSaasDomainV10JobParsingTransaction struct {

	// conversion metadata
	ConversionMetadata *SovrenSaasDomainV10ConversionMetadata `json:"ConversionMetadata,omitempty"`

	// conversions
	Conversions *SovrenSaasDomainV10Conversions `json:"Conversions,omitempty"`

	// geocode response
	GeocodeResponse *SovrenSaasDomainResponseInfoModel `json:"GeocodeResponse,omitempty"`

	// indexing response
	IndexingResponse *SovrenSaasDomainResponseInfoModel `json:"IndexingResponse,omitempty"`

	// job data
	JobData *SovrenParserModelJobJobData `json:"JobData,omitempty"`

	// parsing metadata
	ParsingMetadata *SovrenSaasDomainV10ParsingMetadata `json:"ParsingMetadata,omitempty"`

	// parsing response
	ParsingResponse *SovrenSaasDomainResponseInfoModel `json:"ParsingResponse,omitempty"`
}

// Validate validates this sovren saas domain v10 job parsing transaction
func (m *SovrenSaasDomainV10JobParsingTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConversionMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeocodeResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndexingResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParsingMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParsingResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateConversionMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ConversionMetadata) { // not required
		return nil
	}

	if m.ConversionMetadata != nil {
		if err := m.ConversionMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConversionMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateConversions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversions) { // not required
		return nil
	}

	if m.Conversions != nil {
		if err := m.Conversions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Conversions")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateGeocodeResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.GeocodeResponse) { // not required
		return nil
	}

	if m.GeocodeResponse != nil {
		if err := m.GeocodeResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeocodeResponse")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateIndexingResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.IndexingResponse) { // not required
		return nil
	}

	if m.IndexingResponse != nil {
		if err := m.IndexingResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IndexingResponse")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateJobData(formats strfmt.Registry) error {
	if swag.IsZero(m.JobData) { // not required
		return nil
	}

	if m.JobData != nil {
		if err := m.JobData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobData")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateParsingMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ParsingMetadata) { // not required
		return nil
	}

	if m.ParsingMetadata != nil {
		if err := m.ParsingMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParsingMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) validateParsingResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.ParsingResponse) { // not required
		return nil
	}

	if m.ParsingResponse != nil {
		if err := m.ParsingResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParsingResponse")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren saas domain v10 job parsing transaction based on the context it is used
func (m *SovrenSaasDomainV10JobParsingTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConversionMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeocodeResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIndexingResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParsingMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParsingResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateConversionMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ConversionMetadata != nil {
		if err := m.ConversionMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConversionMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateConversions(ctx context.Context, formats strfmt.Registry) error {

	if m.Conversions != nil {
		if err := m.Conversions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Conversions")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateGeocodeResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.GeocodeResponse != nil {
		if err := m.GeocodeResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeocodeResponse")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateIndexingResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.IndexingResponse != nil {
		if err := m.IndexingResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IndexingResponse")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateJobData(ctx context.Context, formats strfmt.Registry) error {

	if m.JobData != nil {
		if err := m.JobData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobData")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateParsingMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ParsingMetadata != nil {
		if err := m.ParsingMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParsingMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenSaasDomainV10JobParsingTransaction) contextValidateParsingResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.ParsingResponse != nil {
		if err := m.ParsingResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParsingResponse")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenSaasDomainV10JobParsingTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenSaasDomainV10JobParsingTransaction) UnmarshalBinary(b []byte) error {
	var res SovrenSaasDomainV10JobParsingTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
