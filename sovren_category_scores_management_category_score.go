// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SovrenCategoryScoresManagementCategoryScore sovren category scores management category score
//
// swagger:model Sovren.CategoryScores.ManagementCategoryScore
type SovrenCategoryScoresManagementCategoryScore struct {

	// actual
	// Enum: [Unknown None Low Mid High]
	Actual string `json:"Actual,omitempty"`

	// amount of experience matches
	AmountOfExperienceMatches bool `json:"AmountOfExperienceMatches,omitempty"`

	// desired
	// Enum: [Unknown None Low Mid High]
	Desired string `json:"Desired,omitempty"`

	// evidence
	Evidence []*SovrenCategoryScoresEvidence `json:"Evidence"`

	// unweighted score
	UnweightedScore float64 `json:"UnweightedScore,omitempty"`
}

// Validate validates this sovren category scores management category score
func (m *SovrenCategoryScoresManagementCategoryScore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActual(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvidence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sovrenCategoryScoresManagementCategoryScoreTypeActualPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","None","Low","Mid","High"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sovrenCategoryScoresManagementCategoryScoreTypeActualPropEnum = append(sovrenCategoryScoresManagementCategoryScoreTypeActualPropEnum, v)
	}
}

const (

	// SovrenCategoryScoresManagementCategoryScoreActualUnknown captures enum value "Unknown"
	SovrenCategoryScoresManagementCategoryScoreActualUnknown string = "Unknown"

	// SovrenCategoryScoresManagementCategoryScoreActualNone captures enum value "None"
	SovrenCategoryScoresManagementCategoryScoreActualNone string = "None"

	// SovrenCategoryScoresManagementCategoryScoreActualLow captures enum value "Low"
	SovrenCategoryScoresManagementCategoryScoreActualLow string = "Low"

	// SovrenCategoryScoresManagementCategoryScoreActualMid captures enum value "Mid"
	SovrenCategoryScoresManagementCategoryScoreActualMid string = "Mid"

	// SovrenCategoryScoresManagementCategoryScoreActualHigh captures enum value "High"
	SovrenCategoryScoresManagementCategoryScoreActualHigh string = "High"
)

// prop value enum
func (m *SovrenCategoryScoresManagementCategoryScore) validateActualEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sovrenCategoryScoresManagementCategoryScoreTypeActualPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SovrenCategoryScoresManagementCategoryScore) validateActual(formats strfmt.Registry) error {
	if swag.IsZero(m.Actual) { // not required
		return nil
	}

	// value enum
	if err := m.validateActualEnum("Actual", "body", m.Actual); err != nil {
		return err
	}

	return nil
}

var sovrenCategoryScoresManagementCategoryScoreTypeDesiredPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","None","Low","Mid","High"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sovrenCategoryScoresManagementCategoryScoreTypeDesiredPropEnum = append(sovrenCategoryScoresManagementCategoryScoreTypeDesiredPropEnum, v)
	}
}

const (

	// SovrenCategoryScoresManagementCategoryScoreDesiredUnknown captures enum value "Unknown"
	SovrenCategoryScoresManagementCategoryScoreDesiredUnknown string = "Unknown"

	// SovrenCategoryScoresManagementCategoryScoreDesiredNone captures enum value "None"
	SovrenCategoryScoresManagementCategoryScoreDesiredNone string = "None"

	// SovrenCategoryScoresManagementCategoryScoreDesiredLow captures enum value "Low"
	SovrenCategoryScoresManagementCategoryScoreDesiredLow string = "Low"

	// SovrenCategoryScoresManagementCategoryScoreDesiredMid captures enum value "Mid"
	SovrenCategoryScoresManagementCategoryScoreDesiredMid string = "Mid"

	// SovrenCategoryScoresManagementCategoryScoreDesiredHigh captures enum value "High"
	SovrenCategoryScoresManagementCategoryScoreDesiredHigh string = "High"
)

// prop value enum
func (m *SovrenCategoryScoresManagementCategoryScore) validateDesiredEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sovrenCategoryScoresManagementCategoryScoreTypeDesiredPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SovrenCategoryScoresManagementCategoryScore) validateDesired(formats strfmt.Registry) error {
	if swag.IsZero(m.Desired) { // not required
		return nil
	}

	// value enum
	if err := m.validateDesiredEnum("Desired", "body", m.Desired); err != nil {
		return err
	}

	return nil
}

func (m *SovrenCategoryScoresManagementCategoryScore) validateEvidence(formats strfmt.Registry) error {
	if swag.IsZero(m.Evidence) { // not required
		return nil
	}

	for i := 0; i < len(m.Evidence); i++ {
		if swag.IsZero(m.Evidence[i]) { // not required
			continue
		}

		if m.Evidence[i] != nil {
			if err := m.Evidence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evidence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sovren category scores management category score based on the context it is used
func (m *SovrenCategoryScoresManagementCategoryScore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvidence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenCategoryScoresManagementCategoryScore) contextValidateEvidence(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Evidence); i++ {

		if m.Evidence[i] != nil {
			if err := m.Evidence[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Evidence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenCategoryScoresManagementCategoryScore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenCategoryScoresManagementCategoryScore) UnmarshalBinary(b []byte) error {
	var res SovrenCategoryScoresManagementCategoryScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
