// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenLocation sovren location
//
// swagger:model Sovren.Location
type SovrenLocation struct {

	// country code
	CountryCode string `json:"CountryCode,omitempty"`

	// geo point
	GeoPoint *SovrenGeoPoint `json:"GeoPoint,omitempty"`

	// municipality
	Municipality string `json:"Municipality,omitempty"`

	// postal code
	PostalCode string `json:"PostalCode,omitempty"`

	// region
	Region string `json:"Region,omitempty"`
}

// Validate validates this sovren location
func (m *SovrenLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeoPoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenLocation) validateGeoPoint(formats strfmt.Registry) error {
	if swag.IsZero(m.GeoPoint) { // not required
		return nil
	}

	if m.GeoPoint != nil {
		if err := m.GeoPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeoPoint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren location based on the context it is used
func (m *SovrenLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeoPoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenLocation) contextValidateGeoPoint(ctx context.Context, formats strfmt.Registry) error {

	if m.GeoPoint != nil {
		if err := m.GeoPoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeoPoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenLocation) UnmarshalBinary(b []byte) error {
	var res SovrenLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
