// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SovrenSaasDomainV10V10SearchResponse sovren saas domain v10 v10 search response
//
// swagger:model Sovren.Saas.Domain.V10.V10SearchResponse
type SovrenSaasDomainV10V10SearchResponse struct {

	// current count
	// Read Only: true
	CurrentCount int32 `json:"CurrentCount,omitempty"`

	// elapsed milliseconds
	ElapsedMilliseconds int64 `json:"ElapsedMilliseconds,omitempty"`

	// matches
	Matches []*SovrenSearchResult `json:"Matches"`

	// total count
	TotalCount int64 `json:"TotalCount,omitempty"`
}

// Validate validates this sovren saas domain v10 v10 search response
func (m *SovrenSaasDomainV10V10SearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenSaasDomainV10V10SearchResponse) validateMatches(formats strfmt.Registry) error {
	if swag.IsZero(m.Matches) { // not required
		return nil
	}

	for i := 0; i < len(m.Matches); i++ {
		if swag.IsZero(m.Matches[i]) { // not required
			continue
		}

		if m.Matches[i] != nil {
			if err := m.Matches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sovren saas domain v10 v10 search response based on the context it is used
func (m *SovrenSaasDomainV10V10SearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenSaasDomainV10V10SearchResponse) contextValidateCurrentCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "CurrentCount", "body", int32(m.CurrentCount)); err != nil {
		return err
	}

	return nil
}

func (m *SovrenSaasDomainV10V10SearchResponse) contextValidateMatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Matches); i++ {

		if m.Matches[i] != nil {
			if err := m.Matches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Matches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenSaasDomainV10V10SearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenSaasDomainV10V10SearchResponse) UnmarshalBinary(b []byte) error {
	var res SovrenSaasDomainV10V10SearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
