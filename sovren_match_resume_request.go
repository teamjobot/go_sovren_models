// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SovrenMatchResumeRequest sovren match resume request
//
// swagger:model Sovren.MatchResumeRequest
type SovrenMatchResumeRequest struct {

	// category weights
	// Read Only: true
	CategoryWeights []*SovrenCategoryWeight `json:"CategoryWeights"`

	// filter criteria
	FilterCriteria *SovrenV10FilterCriteria `json:"FilterCriteria,omitempty"`

	// index ids to search into
	IndexIdsToSearchInto []string `json:"IndexIdsToSearchInto"`

	// preferred category weights
	PreferredCategoryWeights *SovrenCategoryWeights `json:"PreferredCategoryWeights,omitempty"`

	// resume data
	ResumeData *SovrenParserModelResumeResumeData `json:"ResumeData,omitempty"`

	// settings
	Settings *SovrenMatchSettings `json:"Settings,omitempty"`

	// take
	Take int32 `json:"Take,omitempty"`
}

// Validate validates this sovren match resume request
func (m *SovrenMatchResumeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryWeights(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredCategoryWeights(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResumeData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenMatchResumeRequest) validateCategoryWeights(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryWeights) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoryWeights); i++ {
		if swag.IsZero(m.CategoryWeights[i]) { // not required
			continue
		}

		if m.CategoryWeights[i] != nil {
			if err := m.CategoryWeights[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CategoryWeights" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenMatchResumeRequest) validateFilterCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterCriteria) { // not required
		return nil
	}

	if m.FilterCriteria != nil {
		if err := m.FilterCriteria.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FilterCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenMatchResumeRequest) validatePreferredCategoryWeights(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredCategoryWeights) { // not required
		return nil
	}

	if m.PreferredCategoryWeights != nil {
		if err := m.PreferredCategoryWeights.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreferredCategoryWeights")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenMatchResumeRequest) validateResumeData(formats strfmt.Registry) error {
	if swag.IsZero(m.ResumeData) { // not required
		return nil
	}

	if m.ResumeData != nil {
		if err := m.ResumeData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResumeData")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenMatchResumeRequest) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren match resume request based on the context it is used
func (m *SovrenMatchResumeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategoryWeights(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilterCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreferredCategoryWeights(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResumeData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenMatchResumeRequest) contextValidateCategoryWeights(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "CategoryWeights", "body", []*SovrenCategoryWeight(m.CategoryWeights)); err != nil {
		return err
	}

	for i := 0; i < len(m.CategoryWeights); i++ {

		if m.CategoryWeights[i] != nil {
			if err := m.CategoryWeights[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CategoryWeights" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenMatchResumeRequest) contextValidateFilterCriteria(ctx context.Context, formats strfmt.Registry) error {

	if m.FilterCriteria != nil {
		if err := m.FilterCriteria.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FilterCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenMatchResumeRequest) contextValidatePreferredCategoryWeights(ctx context.Context, formats strfmt.Registry) error {

	if m.PreferredCategoryWeights != nil {
		if err := m.PreferredCategoryWeights.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreferredCategoryWeights")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenMatchResumeRequest) contextValidateResumeData(ctx context.Context, formats strfmt.Registry) error {

	if m.ResumeData != nil {
		if err := m.ResumeData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResumeData")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenMatchResumeRequest) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenMatchResumeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenMatchResumeRequest) UnmarshalBinary(b []byte) error {
	var res SovrenMatchResumeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
