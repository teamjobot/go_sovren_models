// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenParserModelJobJobData sovren parser model job job data
//
// swagger:model Sovren.Parser.Model.Job.JobData
type SovrenParserModelJobJobData struct {

	// certifications and licenses
	CertificationsAndLicenses []string `json:"CertificationsAndLicenses"`

	// current job is management
	CurrentJobIsManagement bool `json:"CurrentJobIsManagement,omitempty"`

	// current location
	CurrentLocation *SovrenParserModelSovrenLocation `json:"CurrentLocation,omitempty"`

	// degrees
	Degrees []*SovrenParserModelJobJobDegree `json:"Degrees"`

	// employer names
	EmployerNames *SovrenParserModelJobEmployerNames `json:"EmployerNames,omitempty"`

	// end date
	EndDate *SovrenCommonV10ParserModelsSovrenPrimitive1SystemDateTimeMscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"EndDate,omitempty"`

	// executive type
	ExecutiveType string `json:"ExecutiveType,omitempty"`

	// highest management score
	HighestManagementScore *SovrenCommonV10ParserModelsSovrenPrimitive1SystemInt32MscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"HighestManagementScore,omitempty"`

	// job description
	JobDescription string `json:"JobDescription,omitempty"`

	// job metadata
	JobMetadata *SovrenParserModelJobJobMetadata `json:"JobMetadata,omitempty"`

	// job requirements
	JobRequirements string `json:"JobRequirements,omitempty"`

	// job titles
	JobTitles *SovrenParserModelJobJobTitles `json:"JobTitles,omitempty"`

	// language codes
	LanguageCodes []string `json:"LanguageCodes"`

	// management level
	ManagementLevel string `json:"ManagementLevel,omitempty"`

	// maximum years
	MaximumYears *SovrenCommonV10ParserModelsSovrenPrimitive1SystemInt32MscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"MaximumYears,omitempty"`

	// maximum years management
	MaximumYearsManagement *SovrenCommonV10ParserModelsSovrenPrimitive1SystemInt32MscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"MaximumYearsManagement,omitempty"`

	// minimum years
	MinimumYears *SovrenCommonV10ParserModelsSovrenPrimitive1SystemInt32MscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"MinimumYears,omitempty"`

	// minimum years management
	MinimumYearsManagement *SovrenCommonV10ParserModelsSovrenPrimitive1SystemInt32MscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"MinimumYearsManagement,omitempty"`

	// owners
	Owners []string `json:"Owners"`

	// required degree
	RequiredDegree string `json:"RequiredDegree,omitempty"`

	// school names
	SchoolNames []string `json:"SchoolNames"`

	// skills data
	SkillsData []*SovrenParserModelJobJobTaxonomyRoot `json:"SkillsData"`

	// start date
	StartDate *SovrenCommonV10ParserModelsSovrenPrimitive1SystemDateTimeMscorlibVersion4000CultureNeutralPublicKeyTokenB77a5c561934e089 `json:"StartDate,omitempty"`

	// terms of interest
	TermsOfInterest []string `json:"TermsOfInterest"`

	// user defined tags
	UserDefinedTags []string `json:"UserDefinedTags"`
}

// Validate validates this sovren parser model job job data
func (m *SovrenParserModelJobJobData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDegrees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmployerNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestManagementScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumYears(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumYearsManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumYears(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumYearsManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillsData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelJobJobData) validateCurrentLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentLocation) { // not required
		return nil
	}

	if m.CurrentLocation != nil {
		if err := m.CurrentLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentLocation")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateDegrees(formats strfmt.Registry) error {
	if swag.IsZero(m.Degrees) { // not required
		return nil
	}

	for i := 0; i < len(m.Degrees); i++ {
		if swag.IsZero(m.Degrees[i]) { // not required
			continue
		}

		if m.Degrees[i] != nil {
			if err := m.Degrees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Degrees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateEmployerNames(formats strfmt.Registry) error {
	if swag.IsZero(m.EmployerNames) { // not required
		return nil
	}

	if m.EmployerNames != nil {
		if err := m.EmployerNames.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EmployerNames")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if m.EndDate != nil {
		if err := m.EndDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndDate")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateHighestManagementScore(formats strfmt.Registry) error {
	if swag.IsZero(m.HighestManagementScore) { // not required
		return nil
	}

	if m.HighestManagementScore != nil {
		if err := m.HighestManagementScore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HighestManagementScore")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateJobMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.JobMetadata) { // not required
		return nil
	}

	if m.JobMetadata != nil {
		if err := m.JobMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateJobTitles(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTitles) { // not required
		return nil
	}

	if m.JobTitles != nil {
		if err := m.JobTitles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobTitles")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateMaximumYears(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumYears) { // not required
		return nil
	}

	if m.MaximumYears != nil {
		if err := m.MaximumYears.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MaximumYears")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateMaximumYearsManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumYearsManagement) { // not required
		return nil
	}

	if m.MaximumYearsManagement != nil {
		if err := m.MaximumYearsManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MaximumYearsManagement")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateMinimumYears(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumYears) { // not required
		return nil
	}

	if m.MinimumYears != nil {
		if err := m.MinimumYears.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinimumYears")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateMinimumYearsManagement(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumYearsManagement) { // not required
		return nil
	}

	if m.MinimumYearsManagement != nil {
		if err := m.MinimumYearsManagement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinimumYearsManagement")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateSkillsData(formats strfmt.Registry) error {
	if swag.IsZero(m.SkillsData) { // not required
		return nil
	}

	for i := 0; i < len(m.SkillsData); i++ {
		if swag.IsZero(m.SkillsData[i]) { // not required
			continue
		}

		if m.SkillsData[i] != nil {
			if err := m.SkillsData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SkillsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelJobJobData) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if m.StartDate != nil {
		if err := m.StartDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren parser model job job data based on the context it is used
func (m *SovrenParserModelJobJobData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDegrees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmployerNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHighestManagementScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobTitles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaximumYears(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaximumYearsManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinimumYears(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinimumYearsManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkillsData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateCurrentLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentLocation != nil {
		if err := m.CurrentLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrentLocation")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateDegrees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Degrees); i++ {

		if m.Degrees[i] != nil {
			if err := m.Degrees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Degrees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateEmployerNames(ctx context.Context, formats strfmt.Registry) error {

	if m.EmployerNames != nil {
		if err := m.EmployerNames.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EmployerNames")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateEndDate(ctx context.Context, formats strfmt.Registry) error {

	if m.EndDate != nil {
		if err := m.EndDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndDate")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateHighestManagementScore(ctx context.Context, formats strfmt.Registry) error {

	if m.HighestManagementScore != nil {
		if err := m.HighestManagementScore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HighestManagementScore")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateJobMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.JobMetadata != nil {
		if err := m.JobMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateJobTitles(ctx context.Context, formats strfmt.Registry) error {

	if m.JobTitles != nil {
		if err := m.JobTitles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobTitles")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateMaximumYears(ctx context.Context, formats strfmt.Registry) error {

	if m.MaximumYears != nil {
		if err := m.MaximumYears.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MaximumYears")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateMaximumYearsManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.MaximumYearsManagement != nil {
		if err := m.MaximumYearsManagement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MaximumYearsManagement")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateMinimumYears(ctx context.Context, formats strfmt.Registry) error {

	if m.MinimumYears != nil {
		if err := m.MinimumYears.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinimumYears")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateMinimumYearsManagement(ctx context.Context, formats strfmt.Registry) error {

	if m.MinimumYearsManagement != nil {
		if err := m.MinimumYearsManagement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinimumYearsManagement")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateSkillsData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SkillsData); i++ {

		if m.SkillsData[i] != nil {
			if err := m.SkillsData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SkillsData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SovrenParserModelJobJobData) contextValidateStartDate(ctx context.Context, formats strfmt.Registry) error {

	if m.StartDate != nil {
		if err := m.StartDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StartDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenParserModelJobJobData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenParserModelJobJobData) UnmarshalBinary(b []byte) error {
	var res SovrenParserModelJobJobData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
