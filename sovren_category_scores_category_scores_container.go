// Code generated by go-swagger; DO NOT EDIT.

package go_sovren_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SovrenCategoryScoresCategoryScoresContainer sovren category scores category scores container
//
// swagger:model Sovren.CategoryScores.CategoryScoresContainer
type SovrenCategoryScoresCategoryScoresContainer struct {

	// certifications
	Certifications *SovrenCategoryScoresSimpleCategoryScore `json:"Certifications,omitempty"`

	// education
	Education *SovrenCategoryScoresEducationCategoryScore `json:"Education,omitempty"`

	// executive type
	ExecutiveType *SovrenCategoryScoresSimpleCategoryScore `json:"ExecutiveType,omitempty"`

	// job titles
	JobTitles *SovrenCategoryScoresJobTitlesCategoryScore `json:"JobTitles,omitempty"`

	// languages
	Languages *SovrenCategoryScoresSimpleCategoryScore `json:"Languages,omitempty"`

	// management level
	ManagementLevel *SovrenCategoryScoresManagementCategoryScore `json:"ManagementLevel,omitempty"`

	// skills
	Skills *SovrenCategoryScoresSkillsCategoryScore `json:"Skills,omitempty"`

	// taxonomies
	Taxonomies *SovrenCategoryScoresTaxonomiesCategoryScore `json:"Taxonomies,omitempty"`
}

// Validate validates this sovren category scores category scores container
func (m *SovrenCategoryScoresCategoryScoresContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEducation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutiveType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagementLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxonomies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateCertifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Certifications) { // not required
		return nil
	}

	if m.Certifications != nil {
		if err := m.Certifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Certifications")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateEducation(formats strfmt.Registry) error {
	if swag.IsZero(m.Education) { // not required
		return nil
	}

	if m.Education != nil {
		if err := m.Education.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Education")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateExecutiveType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutiveType) { // not required
		return nil
	}

	if m.ExecutiveType != nil {
		if err := m.ExecutiveType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ExecutiveType")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateJobTitles(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTitles) { // not required
		return nil
	}

	if m.JobTitles != nil {
		if err := m.JobTitles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobTitles")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateLanguages(formats strfmt.Registry) error {
	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	if m.Languages != nil {
		if err := m.Languages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Languages")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateManagementLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementLevel) { // not required
		return nil
	}

	if m.ManagementLevel != nil {
		if err := m.ManagementLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementLevel")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateSkills(formats strfmt.Registry) error {
	if swag.IsZero(m.Skills) { // not required
		return nil
	}

	if m.Skills != nil {
		if err := m.Skills.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Skills")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) validateTaxonomies(formats strfmt.Registry) error {
	if swag.IsZero(m.Taxonomies) { // not required
		return nil
	}

	if m.Taxonomies != nil {
		if err := m.Taxonomies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Taxonomies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sovren category scores category scores container based on the context it is used
func (m *SovrenCategoryScoresCategoryScoresContainer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEducation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutiveType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobTitles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManagementLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxonomies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateCertifications(ctx context.Context, formats strfmt.Registry) error {

	if m.Certifications != nil {
		if err := m.Certifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Certifications")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateEducation(ctx context.Context, formats strfmt.Registry) error {

	if m.Education != nil {
		if err := m.Education.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Education")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateExecutiveType(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecutiveType != nil {
		if err := m.ExecutiveType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ExecutiveType")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateJobTitles(ctx context.Context, formats strfmt.Registry) error {

	if m.JobTitles != nil {
		if err := m.JobTitles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("JobTitles")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateLanguages(ctx context.Context, formats strfmt.Registry) error {

	if m.Languages != nil {
		if err := m.Languages.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Languages")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateManagementLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementLevel != nil {
		if err := m.ManagementLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManagementLevel")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateSkills(ctx context.Context, formats strfmt.Registry) error {

	if m.Skills != nil {
		if err := m.Skills.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Skills")
			}
			return err
		}
	}

	return nil
}

func (m *SovrenCategoryScoresCategoryScoresContainer) contextValidateTaxonomies(ctx context.Context, formats strfmt.Registry) error {

	if m.Taxonomies != nil {
		if err := m.Taxonomies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Taxonomies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SovrenCategoryScoresCategoryScoresContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SovrenCategoryScoresCategoryScoresContainer) UnmarshalBinary(b []byte) error {
	var res SovrenCategoryScoresCategoryScoresContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
